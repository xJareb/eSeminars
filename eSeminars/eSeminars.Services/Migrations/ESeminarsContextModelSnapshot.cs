// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eSeminars.Services.Database;

#nullable disable

namespace eSeminars.Services.Migrations
{
    [DbContext(typeof(ESeminarsContext))]
    partial class ESeminarsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eSeminars.Services.Database.Dojmovi", b =>
                {
                    b.Property<int>("DojamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DojamID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DojamId"));

                    b.Property<DateTime>("DatumKreiranjaDojma")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<int>("Ocjena")
                        .HasColumnType("int");

                    b.Property<int?>("SeminarId")
                        .HasColumnType("int")
                        .HasColumnName("SeminarID");

                    b.HasKey("DojamId")
                        .HasName("PK__Dojmovi__FDF96C5061A3D04D");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("SeminarId");

                    b.ToTable("Dojmovi", (string)null);

                    b.HasData(
                        new
                        {
                            DojamId = 1,
                            DatumKreiranjaDojma = new DateTime(2025, 6, 14, 18, 30, 12, 904, DateTimeKind.Local).AddTicks(1041),
                            IsDeleted = false,
                            KorisnikId = 3,
                            Ocjena = 5,
                            SeminarId = 1
                        },
                        new
                        {
                            DojamId = 2,
                            DatumKreiranjaDojma = new DateTime(2025, 6, 16, 18, 30, 12, 904, DateTimeKind.Local).AddTicks(1099),
                            IsDeleted = false,
                            KorisnikId = 3,
                            Ocjena = 4,
                            SeminarId = 2
                        },
                        new
                        {
                            DojamId = 3,
                            DatumKreiranjaDojma = new DateTime(2025, 6, 19, 18, 30, 12, 904, DateTimeKind.Local).AddTicks(1101),
                            IsDeleted = false,
                            KorisnikId = 3,
                            Ocjena = 3,
                            SeminarId = 3
                        },
                        new
                        {
                            DojamId = 5,
                            DatumKreiranjaDojma = new DateTime(2025, 6, 29, 18, 30, 12, 904, DateTimeKind.Local).AddTicks(1104),
                            IsDeleted = false,
                            KorisnikId = 3,
                            Ocjena = 4,
                            SeminarId = 5
                        });
                });

            modelBuilder.Entity("eSeminars.Services.Database.Kategorije", b =>
                {
                    b.Property<int>("KategorijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KategorijaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategorijaId"));

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("KategorijaId")
                        .HasName("PK__Kategori__6C3B8FCE05ED5B27");

                    b.ToTable("Kategorije", (string)null);

                    b.HasData(
                        new
                        {
                            KategorijaId = 1,
                            IsDeleted = false,
                            Naziv = "Technology",
                            Opis = "Seminars focused on emerging technologies, programming, the IT industry, and innovations."
                        },
                        new
                        {
                            KategorijaId = 2,
                            IsDeleted = false,
                            Naziv = "Entrepreneurship",
                            Opis = "Educational content on starting, managing, and growing a business"
                        },
                        new
                        {
                            KategorijaId = 3,
                            IsDeleted = false,
                            Naziv = "Health and Wellness",
                            Opis = "Topics related to physical and mental health, disease prevention, nutrition, and fitness."
                        },
                        new
                        {
                            KategorijaId = 4,
                            IsDeleted = false,
                            Naziv = "Education",
                            Opis = "Seminars for teachers, parents, and students aiming to improve education quality"
                        },
                        new
                        {
                            KategorijaId = 5,
                            IsDeleted = false,
                            Naziv = "Personal Development",
                            Opis = "Focused on building communication, time management, public speaking"
                        });
                });

            modelBuilder.Entity("eSeminars.Services.Database.Korisnici", b =>
                {
                    b.Property<int>("KorisnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikId"));

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Uloga")
                        .HasColumnType("int");

                    b.HasKey("KorisnikId")
                        .HasName("PK__Korisnic__80B06D612299F206");

                    b.HasIndex("Uloga");

                    b.ToTable("Korisnici", (string)null);

                    b.HasData(
                        new
                        {
                            KorisnikId = 1,
                            DatumRodjenja = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            Ime = "Admin",
                            IsDeleted = false,
                            LozinkaHash = "uDJQzltg1+w1Hjhdktk4XbhuCrE=",
                            LozinkaSalt = "VBZIM52NwnqBQqr+Z84P9Q==",
                            Prezime = "Admin",
                            Uloga = 1
                        },
                        new
                        {
                            KorisnikId = 2,
                            DatumRodjenja = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "organizator@gmail.com",
                            Ime = "Organizator",
                            IsDeleted = false,
                            LozinkaHash = "NVG/++BM466+Da6OgKZyptEKQP4=",
                            LozinkaSalt = "6ZA2IamCnGv7wLPfY3roQw==",
                            Prezime = "Organizator",
                            Uloga = 3
                        },
                        new
                        {
                            KorisnikId = 3,
                            DatumRodjenja = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "korisnik@gmail.com",
                            Ime = "Korisnik",
                            IsDeleted = false,
                            LozinkaHash = "IYQP04iyzp/PgO854mbEzcUB+bE=",
                            LozinkaSalt = "+nykRTSHxp8hfVWKYjFt4w==",
                            Prezime = "Korisnik",
                            Uloga = 2
                        });
                });

            modelBuilder.Entity("eSeminars.Services.Database.Materijali", b =>
                {
                    b.Property<int>("MaterijalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaterijalID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterijalId"));

                    b.Property<DateTime>("DatumDodavanja")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Putanja")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("SeminarId")
                        .HasColumnType("int")
                        .HasColumnName("SeminarID");

                    b.HasKey("MaterijalId")
                        .HasName("PK__Materija__FB5CCBBD4A744600");

                    b.HasIndex("SeminarId");

                    b.ToTable("Materijali", (string)null);

                    b.HasData(
                        new
                        {
                            MaterijalId = 1,
                            DatumDodavanja = new DateTime(2025, 6, 4, 18, 30, 12, 905, DateTimeKind.Local).AddTicks(8248),
                            IsDeleted = false,
                            Naziv = "Web Development Basics Slides",
                            Putanja = "materials/web_dev_basics.pdf",
                            SeminarId = 1
                        },
                        new
                        {
                            MaterijalId = 2,
                            DatumDodavanja = new DateTime(2025, 6, 9, 18, 30, 12, 905, DateTimeKind.Local).AddTicks(8297),
                            IsDeleted = false,
                            Naziv = "Startup Fundamentals Workbook",
                            Putanja = "materials/startup_fundamentals.docx",
                            SeminarId = 2
                        },
                        new
                        {
                            MaterijalId = 3,
                            DatumDodavanja = new DateTime(2025, 6, 14, 18, 30, 12, 905, DateTimeKind.Local).AddTicks(8300),
                            IsDeleted = false,
                            Naziv = "Nutrition & Mental Health Research",
                            Putanja = "materials/nutrition_mental_health.pdf",
                            SeminarId = 3
                        },
                        new
                        {
                            MaterijalId = 4,
                            DatumDodavanja = new DateTime(2025, 6, 19, 18, 30, 12, 905, DateTimeKind.Local).AddTicks(8302),
                            IsDeleted = false,
                            Naziv = "Innovative Teaching Methods Guide",
                            Putanja = "materials/teaching_methods_guide.pdf",
                            SeminarId = 4
                        },
                        new
                        {
                            MaterijalId = 5,
                            DatumDodavanja = new DateTime(2025, 6, 24, 18, 30, 12, 905, DateTimeKind.Local).AddTicks(8305),
                            IsDeleted = false,
                            Naziv = "Communication Skills Exercises",
                            Putanja = "materials/communication_skills.zip",
                            SeminarId = 5
                        },
                        new
                        {
                            MaterijalId = 6,
                            DatumDodavanja = new DateTime(2025, 6, 29, 18, 30, 12, 905, DateTimeKind.Local).AddTicks(8307),
                            IsDeleted = false,
                            Naziv = "Advanced JavaScript Examples",
                            Putanja = "materials/advanced_js_examples.zip",
                            SeminarId = 6
                        },
                        new
                        {
                            MaterijalId = 7,
                            DatumDodavanja = new DateTime(2025, 7, 4, 18, 30, 12, 905, DateTimeKind.Local).AddTicks(8310),
                            IsDeleted = false,
                            Naziv = "Funding Strategies Presentation",
                            Putanja = "materials/funding_strategies.pptx",
                            SeminarId = 7
                        },
                        new
                        {
                            MaterijalId = 8,
                            DatumDodavanja = new DateTime(2025, 7, 4, 18, 30, 12, 905, DateTimeKind.Local).AddTicks(8312),
                            IsDeleted = false,
                            Naziv = "Mindfulness Exercises",
                            Putanja = "materials/mindfulness_exercises.pdf",
                            SeminarId = 8
                        },
                        new
                        {
                            MaterijalId = 9,
                            DatumDodavanja = new DateTime(2025, 7, 4, 18, 30, 12, 905, DateTimeKind.Local).AddTicks(8314),
                            IsDeleted = false,
                            Naziv = "Blended Learning Resources",
                            Putanja = "materials/blended_learning_resources.pdf",
                            SeminarId = 9
                        });
                });

            modelBuilder.Entity("eSeminars.Services.Database.Obavijesti", b =>
                {
                    b.Property<int>("ObavijestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ObavijestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObavijestId"));

                    b.Property<DateTime>("DatumObavijesti")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("ObavijestId")
                        .HasName("PK__Obavijes__99D330C0CEB7A3B7");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Obavijesti", (string)null);

                    b.HasData(
                        new
                        {
                            ObavijestId = 1,
                            DatumObavijesti = new DateTime(2025, 7, 1, 18, 30, 12, 906, DateTimeKind.Local).AddTicks(2562),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Naslov = "Seminar Schedule Update",
                            Sadrzaj = "The schedule for the upcoming seminars has been updated. Please check your email for details."
                        },
                        new
                        {
                            ObavijestId = 2,
                            DatumObavijesti = new DateTime(2025, 7, 3, 18, 30, 12, 906, DateTimeKind.Local).AddTicks(2604),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Naslov = "New Seminar Available",
                            Sadrzaj = "A new seminar on 'Advanced JavaScript Concepts' has been added to the schedule."
                        },
                        new
                        {
                            ObavijestId = 3,
                            DatumObavijesti = new DateTime(2025, 6, 27, 18, 30, 12, 906, DateTimeKind.Local).AddTicks(2608),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Naslov = "Maintenance Downtime",
                            Sadrzaj = "The system will undergo maintenance on July 10th from 1 AM to 3 AM. Services may be temporarily unavailable."
                        },
                        new
                        {
                            ObavijestId = 4,
                            DatumObavijesti = new DateTime(2025, 7, 4, 18, 30, 12, 906, DateTimeKind.Local).AddTicks(2612),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Naslov = "Feedback Request",
                            Sadrzaj = "Please provide your feedback for the seminar you attended last week."
                        });
                });

            modelBuilder.Entity("eSeminars.Services.Database.Predavaci", b =>
                {
                    b.Property<int>("PredavacId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PredavacID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PredavacId"));

                    b.Property<string>("Biografija")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PredavacId")
                        .HasName("PK__Predavac__3C1813706CF8DCCA");

                    b.ToTable("Predavaci", (string)null);

                    b.HasData(
                        new
                        {
                            PredavacId = 1,
                            Biografija = "Experienced software engineer with a passion for teaching coding.",
                            Email = "emily.johnson@example.com",
                            Ime = "Emily",
                            IsDeleted = false,
                            Prezime = "Johnson",
                            Telefon = "12025550101"
                        },
                        new
                        {
                            PredavacId = 2,
                            Biografija = "Startup mentor and entrepreneur with 10+ years of experience.",
                            Email = "michael.lee@example.com",
                            Ime = "Michael",
                            IsDeleted = false,
                            Prezime = "Lee",
                            Telefon = "12025550123"
                        },
                        new
                        {
                            PredavacId = 3,
                            Biografija = "Health coach focused on nutrition and mental well-being.",
                            Email = "sophia.martinez@example.com",
                            Ime = "Sophia",
                            IsDeleted = false,
                            Prezime = "Martinez",
                            Telefon = "12025550188"
                        },
                        new
                        {
                            PredavacId = 4,
                            Biografija = "Educator and public speaker specializing in effective teaching methods.",
                            Email = "david.nguyen@example.com",
                            Ime = "David",
                            IsDeleted = false,
                            Prezime = "Nguyen",
                            Telefon = "12025550170"
                        },
                        new
                        {
                            PredavacId = 5,
                            Biografija = "Personal development trainer and leadership consultant.",
                            Email = "olivia.brown@example.com",
                            Ime = "Olivia",
                            IsDeleted = false,
                            Prezime = "Brown",
                            Telefon = "12025550135"
                        });
                });

            modelBuilder.Entity("eSeminars.Services.Database.Rezervacije", b =>
                {
                    b.Property<int>("RezervacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RezervacijaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RezervacijaId"));

                    b.Property<DateTime>("DatumRezervacije")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<int?>("SeminarId")
                        .HasColumnType("int")
                        .HasColumnName("SeminarID");

                    b.Property<string>("StateMachine")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("RezervacijaId")
                        .HasName("PK__Rezervac__CABA44FD7D67B779");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("SeminarId");

                    b.ToTable("Rezervacije", (string)null);

                    b.HasData(
                        new
                        {
                            RezervacijaId = 1,
                            DatumRezervacije = new DateTime(2025, 5, 4, 18, 30, 12, 906, DateTimeKind.Local).AddTicks(9314),
                            IsDeleted = false,
                            KorisnikId = 3,
                            SeminarId = 1,
                            StateMachine = "approved"
                        },
                        new
                        {
                            RezervacijaId = 2,
                            DatumRezervacije = new DateTime(2025, 5, 25, 18, 30, 12, 906, DateTimeKind.Local).AddTicks(9349),
                            IsDeleted = false,
                            KorisnikId = 3,
                            SeminarId = 2,
                            StateMachine = "approved"
                        },
                        new
                        {
                            RezervacijaId = 3,
                            DatumRezervacije = new DateTime(2025, 6, 4, 18, 30, 12, 906, DateTimeKind.Local).AddTicks(9354),
                            IsDeleted = false,
                            KorisnikId = 3,
                            SeminarId = 3,
                            StateMachine = "approved"
                        },
                        new
                        {
                            RezervacijaId = 4,
                            DatumRezervacije = new DateTime(2025, 6, 29, 18, 30, 12, 906, DateTimeKind.Local).AddTicks(9357),
                            IsDeleted = false,
                            KorisnikId = 3,
                            SeminarId = 7,
                            StateMachine = "pending"
                        },
                        new
                        {
                            RezervacijaId = 5,
                            DatumRezervacije = new DateTime(2025, 7, 1, 18, 30, 12, 906, DateTimeKind.Local).AddTicks(9359),
                            IsDeleted = false,
                            KorisnikId = 3,
                            SeminarId = 8,
                            StateMachine = "pending"
                        },
                        new
                        {
                            RezervacijaId = 6,
                            DatumRezervacije = new DateTime(2025, 7, 4, 18, 30, 12, 906, DateTimeKind.Local).AddTicks(9362),
                            IsDeleted = false,
                            KorisnikId = 3,
                            SeminarId = 10,
                            StateMachine = "pending"
                        });
                });

            modelBuilder.Entity("eSeminars.Services.Database.SacuvaniSeminari", b =>
                {
                    b.Property<int>("SacuvaniSeminarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SacuvaniSeminarID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SacuvaniSeminarId"));

                    b.Property<DateTime>("DatumSacuvanja")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<int?>("SeminarId")
                        .HasColumnType("int")
                        .HasColumnName("SeminarID");

                    b.HasKey("SacuvaniSeminarId")
                        .HasName("PK__Sacuvani__0437E3BFA7AB7A53");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("SeminarId");

                    b.ToTable("SacuvaniSeminari", (string)null);

                    b.HasData(
                        new
                        {
                            SacuvaniSeminarId = 1,
                            DatumSacuvanja = new DateTime(2025, 6, 24, 18, 30, 12, 907, DateTimeKind.Local).AddTicks(2298),
                            IsDeleted = false,
                            KorisnikId = 3,
                            SeminarId = 2
                        },
                        new
                        {
                            SacuvaniSeminarId = 2,
                            DatumSacuvanja = new DateTime(2025, 6, 29, 18, 30, 12, 907, DateTimeKind.Local).AddTicks(2314),
                            IsDeleted = false,
                            KorisnikId = 3,
                            SeminarId = 5
                        },
                        new
                        {
                            SacuvaniSeminarId = 3,
                            DatumSacuvanja = new DateTime(2025, 7, 4, 18, 30, 12, 907, DateTimeKind.Local).AddTicks(2316),
                            IsDeleted = false,
                            KorisnikId = 3,
                            SeminarId = 8
                        });
                });

            modelBuilder.Entity("eSeminars.Services.Database.Seminari", b =>
                {
                    b.Property<int>("SeminarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SeminarID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeminarId"));

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DatumVrijeme")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("Kapacitet")
                        .HasColumnType("int");

                    b.Property<int?>("KategorijaId")
                        .HasColumnType("int")
                        .HasColumnName("KategorijaID");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<string>("Lokacija")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("PredavacId")
                        .HasColumnType("int")
                        .HasColumnName("PredavacID");

                    b.Property<string>("StateMachine")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Zauzeti")
                        .HasColumnType("int");

                    b.HasKey("SeminarId")
                        .HasName("PK__Seminari__66BB8935083EE2D6");

                    b.HasIndex("KategorijaId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("PredavacId");

                    b.ToTable("Seminari", (string)null);

                    b.HasData(
                        new
                        {
                            SeminarId = 1,
                            DatumKreiranja = new DateTime(2025, 1, 4, 18, 30, 12, 908, DateTimeKind.Local).AddTicks(1508),
                            DatumVrijeme = new DateTime(2024, 12, 10, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Kapacitet = 50,
                            KategorijaId = 1,
                            KorisnikId = 2,
                            Lokacija = "Conference Room A",
                            Naslov = "Introduction to Modern Web Development",
                            Opis = "Learn the basics of HTML, CSS, and JavaScript.",
                            PredavacId = 1,
                            StateMachine = "active",
                            Zauzeti = 0
                        },
                        new
                        {
                            SeminarId = 2,
                            DatumKreiranja = new DateTime(2025, 2, 4, 18, 30, 12, 908, DateTimeKind.Local).AddTicks(1536),
                            DatumVrijeme = new DateTime(2025, 1, 15, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Kapacitet = 40,
                            KategorijaId = 2,
                            KorisnikId = 2,
                            Lokacija = "Conference Room B",
                            Naslov = "Startup Fundamentals",
                            Opis = "Essential knowledge for launching your own business.",
                            PredavacId = 2,
                            StateMachine = "active",
                            Zauzeti = 0
                        },
                        new
                        {
                            SeminarId = 3,
                            DatumKreiranja = new DateTime(2025, 3, 4, 18, 30, 12, 908, DateTimeKind.Local).AddTicks(1541),
                            DatumVrijeme = new DateTime(2025, 3, 20, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Kapacitet = 60,
                            KategorijaId = 3,
                            KorisnikId = 2,
                            Lokacija = "Conference Room C",
                            Naslov = "Nutrition and Mental Health",
                            Opis = "Discover how diet affects your mind and body.",
                            PredavacId = 3,
                            StateMachine = "active",
                            Zauzeti = 0
                        },
                        new
                        {
                            SeminarId = 4,
                            DatumKreiranja = new DateTime(2025, 4, 4, 18, 30, 12, 908, DateTimeKind.Local).AddTicks(1545),
                            DatumVrijeme = new DateTime(2025, 4, 22, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Kapacitet = 30,
                            KategorijaId = 4,
                            KorisnikId = 2,
                            Lokacija = "Conference Room D",
                            Naslov = "Innovative Teaching Techniques",
                            Opis = "Improve your teaching skills with new methods.",
                            PredavacId = 4,
                            StateMachine = "active",
                            Zauzeti = 0
                        },
                        new
                        {
                            SeminarId = 5,
                            DatumKreiranja = new DateTime(2025, 7, 4, 18, 30, 12, 908, DateTimeKind.Local).AddTicks(1549),
                            DatumVrijeme = new DateTime(2025, 12, 25, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Kapacitet = 45,
                            KategorijaId = 5,
                            KorisnikId = 2,
                            Lokacija = "Conference Room E",
                            Naslov = "Effective Communication Skills",
                            Opis = "Learn how to communicate clearly and confidently.",
                            PredavacId = 5,
                            StateMachine = "active",
                            Zauzeti = 0
                        },
                        new
                        {
                            SeminarId = 6,
                            DatumKreiranja = new DateTime(2025, 7, 4, 18, 30, 12, 908, DateTimeKind.Local).AddTicks(1553),
                            DatumVrijeme = new DateTime(2025, 12, 30, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Kapacitet = 50,
                            KategorijaId = 1,
                            KorisnikId = 2,
                            Lokacija = "Conference Room A",
                            Naslov = "Advanced JavaScript Concepts",
                            Opis = "Deep dive into closures, prototypes, and async programming.",
                            PredavacId = 1,
                            StateMachine = "active",
                            Zauzeti = 0
                        },
                        new
                        {
                            SeminarId = 7,
                            DatumKreiranja = new DateTime(2025, 7, 4, 18, 30, 12, 908, DateTimeKind.Local).AddTicks(1557),
                            DatumVrijeme = new DateTime(2026, 1, 3, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Kapacitet = 40,
                            KategorijaId = 2,
                            KorisnikId = 2,
                            Lokacija = "Conference Room B",
                            Naslov = "Funding Your Startup",
                            Opis = "Explore strategies for raising capital.",
                            PredavacId = 2,
                            StateMachine = "active",
                            Zauzeti = 0
                        },
                        new
                        {
                            SeminarId = 8,
                            DatumKreiranja = new DateTime(2025, 7, 4, 18, 30, 12, 908, DateTimeKind.Local).AddTicks(1560),
                            DatumVrijeme = new DateTime(2026, 1, 5, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Kapacitet = 60,
                            KategorijaId = 3,
                            KorisnikId = 2,
                            Lokacija = "Conference Room C",
                            Naslov = "Mindfulness and Stress Reduction",
                            Opis = "Techniques to improve mental wellness.",
                            PredavacId = 3,
                            StateMachine = "active",
                            Zauzeti = 0
                        },
                        new
                        {
                            SeminarId = 9,
                            DatumKreiranja = new DateTime(2025, 7, 4, 18, 30, 12, 908, DateTimeKind.Local).AddTicks(1564),
                            DatumVrijeme = new DateTime(2026, 1, 7, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Kapacitet = 30,
                            KategorijaId = 4,
                            KorisnikId = 2,
                            Lokacija = "Conference Room D",
                            Naslov = "Blended Learning Models",
                            Opis = "Combine online and in-person teaching effectively.",
                            PredavacId = 4,
                            StateMachine = "active",
                            Zauzeti = 0
                        },
                        new
                        {
                            SeminarId = 10,
                            DatumKreiranja = new DateTime(2025, 7, 4, 18, 30, 12, 908, DateTimeKind.Local).AddTicks(1568),
                            DatumVrijeme = new DateTime(2026, 1, 10, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Kapacitet = 45,
                            KategorijaId = 5,
                            KorisnikId = 2,
                            Lokacija = "Conference Room E",
                            Naslov = "Time Management Strategies",
                            Opis = "Boost productivity with smart planning.",
                            PredavacId = 5,
                            StateMachine = "active",
                            Zauzeti = 0
                        });
                });

            modelBuilder.Entity("eSeminars.Services.Database.Sponzori", b =>
                {
                    b.Property<int>("SponzorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SponzorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SponzorId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("KontaktOsoba")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SponzorId")
                        .HasName("PK__Sponzori__8161C49A1E97374F");

                    b.ToTable("Sponzori", (string)null);

                    b.HasData(
                        new
                        {
                            SponzorId = 1,
                            Email = "contact@technova.com",
                            IsDeleted = false,
                            KontaktOsoba = "Laura Smith",
                            Naziv = "TechNova Inc.",
                            Telefon = "2025550191"
                        },
                        new
                        {
                            SponzorId = 2,
                            Email = "info@greenhealth.org",
                            IsDeleted = false,
                            KontaktOsoba = "James Taylor",
                            Naziv = "GreenHealth Foundation",
                            Telefon = "2025550142"
                        },
                        new
                        {
                            SponzorId = 3,
                            Email = "support@edufuture.com",
                            IsDeleted = false,
                            KontaktOsoba = "Anna Williams",
                            Naziv = "EduFuture Alliance",
                            Telefon = "2025550177"
                        },
                        new
                        {
                            SponzorId = 4,
                            Email = "hello@wellbeingco.com",
                            IsDeleted = false,
                            KontaktOsoba = "Robert Johnson",
                            Naziv = "WellBeing Co.",
                            Telefon = "2025550165"
                        },
                        new
                        {
                            SponzorId = 5,
                            Email = "partners@innovalab.io",
                            IsDeleted = false,
                            KontaktOsoba = "Emily Davis",
                            Naziv = "InnovaLab",
                            Telefon = "2025550119"
                        });
                });

            modelBuilder.Entity("eSeminars.Services.Database.SponzoriSeminari", b =>
                {
                    b.Property<int>("SponzoriSeminariId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SponzoriSeminariID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SponzoriSeminariId"));

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("SeminarId")
                        .HasColumnType("int")
                        .HasColumnName("SeminarID");

                    b.Property<int?>("SponzorId")
                        .HasColumnType("int")
                        .HasColumnName("SponzorID");

                    b.HasKey("SponzoriSeminariId")
                        .HasName("PK__Sponzori__BF5AC3214370BF0F");

                    b.HasIndex("SeminarId");

                    b.HasIndex("SponzorId");

                    b.ToTable("SponzoriSeminari", (string)null);

                    b.HasData(
                        new
                        {
                            SponzoriSeminariId = 1,
                            IsDeleted = false,
                            SeminarId = 1,
                            SponzorId = 1
                        },
                        new
                        {
                            SponzoriSeminariId = 2,
                            IsDeleted = false,
                            SeminarId = 2,
                            SponzorId = 2
                        },
                        new
                        {
                            SponzoriSeminariId = 3,
                            IsDeleted = false,
                            SeminarId = 3,
                            SponzorId = 3
                        },
                        new
                        {
                            SponzoriSeminariId = 4,
                            IsDeleted = false,
                            SeminarId = 4,
                            SponzorId = 1
                        },
                        new
                        {
                            SponzoriSeminariId = 5,
                            IsDeleted = false,
                            SeminarId = 5,
                            SponzorId = 4
                        },
                        new
                        {
                            SponzoriSeminariId = 6,
                            IsDeleted = false,
                            SeminarId = 6,
                            SponzorId = 2
                        },
                        new
                        {
                            SponzoriSeminariId = 7,
                            IsDeleted = false,
                            SeminarId = 7,
                            SponzorId = 3
                        },
                        new
                        {
                            SponzoriSeminariId = 8,
                            IsDeleted = false,
                            SeminarId = 8,
                            SponzorId = 5
                        },
                        new
                        {
                            SponzoriSeminariId = 9,
                            IsDeleted = false,
                            SeminarId = 9,
                            SponzorId = 4
                        },
                        new
                        {
                            SponzoriSeminariId = 10,
                            IsDeleted = false,
                            SeminarId = 10,
                            SponzorId = 5
                        });
                });

            modelBuilder.Entity("eSeminars.Services.Database.Uloge", b =>
                {
                    b.Property<int>("UlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UlogaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UlogaId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("UlogaId")
                        .HasName("PK__Uloge__DCAB23EBA5488EF0");

                    b.ToTable("Uloge", (string)null);

                    b.HasData(
                        new
                        {
                            UlogaId = 1,
                            Naziv = "Administrator"
                        },
                        new
                        {
                            UlogaId = 2,
                            Naziv = "Korisnik"
                        },
                        new
                        {
                            UlogaId = 3,
                            Naziv = "Organizator"
                        });
                });

            modelBuilder.Entity("eSeminars.Services.Database.Dojmovi", b =>
                {
                    b.HasOne("eSeminars.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Dojmovis")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__Dojmovi__Korisni__4D94879B");

                    b.HasOne("eSeminars.Services.Database.Seminari", "Seminar")
                        .WithMany("Dojmovis")
                        .HasForeignKey("SeminarId")
                        .HasConstraintName("FK__Dojmovi__Seminar__4CA06362");

                    b.Navigation("Korisnik");

                    b.Navigation("Seminar");
                });

            modelBuilder.Entity("eSeminars.Services.Database.Korisnici", b =>
                {
                    b.HasOne("eSeminars.Services.Database.Uloge", "UlogaNavigation")
                        .WithMany("Korisnicis")
                        .HasForeignKey("Uloga")
                        .HasConstraintName("FK__Korisnici__Uloga__3B75D760");

                    b.Navigation("UlogaNavigation");
                });

            modelBuilder.Entity("eSeminars.Services.Database.Materijali", b =>
                {
                    b.HasOne("eSeminars.Services.Database.Seminari", "Seminar")
                        .WithMany("Materijalis")
                        .HasForeignKey("SeminarId")
                        .HasConstraintName("FK__Materijal__Semin__5812160E");

                    b.Navigation("Seminar");
                });

            modelBuilder.Entity("eSeminars.Services.Database.Obavijesti", b =>
                {
                    b.HasOne("eSeminars.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Obavijestis")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__Obavijest__Koris__5441852A");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eSeminars.Services.Database.Rezervacije", b =>
                {
                    b.HasOne("eSeminars.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Rezervacijes")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__Rezervaci__Koris__48CFD27E");

                    b.HasOne("eSeminars.Services.Database.Seminari", "Seminar")
                        .WithMany("Rezervacijes")
                        .HasForeignKey("SeminarId")
                        .HasConstraintName("FK__Rezervaci__Semin__47DBAE45");

                    b.Navigation("Korisnik");

                    b.Navigation("Seminar");
                });

            modelBuilder.Entity("eSeminars.Services.Database.SacuvaniSeminari", b =>
                {
                    b.HasOne("eSeminars.Services.Database.Korisnici", "Korisnik")
                        .WithMany("SacuvaniSeminaris")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__SacuvaniS__Koris__5070F446");

                    b.HasOne("eSeminars.Services.Database.Seminari", "Seminar")
                        .WithMany("SacuvaniSeminaris")
                        .HasForeignKey("SeminarId")
                        .HasConstraintName("FK__SacuvaniS__Semin__5165187F");

                    b.Navigation("Korisnik");

                    b.Navigation("Seminar");
                });

            modelBuilder.Entity("eSeminars.Services.Database.Seminari", b =>
                {
                    b.HasOne("eSeminars.Services.Database.Kategorije", "Kategorija")
                        .WithMany("Seminaris")
                        .HasForeignKey("KategorijaId")
                        .HasConstraintName("FK__Seminari__Katego__440B1D61");

                    b.HasOne("eSeminars.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Seminaris")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__Seminari__Korisn__4222D4EF");

                    b.HasOne("eSeminars.Services.Database.Predavaci", "Predavac")
                        .WithMany("Seminaris")
                        .HasForeignKey("PredavacId")
                        .HasConstraintName("FK__Seminari__Predav__4316F928");

                    b.Navigation("Kategorija");

                    b.Navigation("Korisnik");

                    b.Navigation("Predavac");
                });

            modelBuilder.Entity("eSeminars.Services.Database.SponzoriSeminari", b =>
                {
                    b.HasOne("eSeminars.Services.Database.Seminari", "Seminar")
                        .WithMany("SponzoriSeminaris")
                        .HasForeignKey("SeminarId")
                        .HasConstraintName("FK__SponzoriS__Semin__5EBF139D");

                    b.HasOne("eSeminars.Services.Database.Sponzori", "Sponzor")
                        .WithMany("SponzoriSeminaris")
                        .HasForeignKey("SponzorId")
                        .HasConstraintName("FK__SponzoriS__Sponz__5FB337D6");

                    b.Navigation("Seminar");

                    b.Navigation("Sponzor");
                });

            modelBuilder.Entity("eSeminars.Services.Database.Kategorije", b =>
                {
                    b.Navigation("Seminaris");
                });

            modelBuilder.Entity("eSeminars.Services.Database.Korisnici", b =>
                {
                    b.Navigation("Dojmovis");

                    b.Navigation("Obavijestis");

                    b.Navigation("Rezervacijes");

                    b.Navigation("SacuvaniSeminaris");

                    b.Navigation("Seminaris");
                });

            modelBuilder.Entity("eSeminars.Services.Database.Predavaci", b =>
                {
                    b.Navigation("Seminaris");
                });

            modelBuilder.Entity("eSeminars.Services.Database.Seminari", b =>
                {
                    b.Navigation("Dojmovis");

                    b.Navigation("Materijalis");

                    b.Navigation("Rezervacijes");

                    b.Navigation("SacuvaniSeminaris");

                    b.Navigation("SponzoriSeminaris");
                });

            modelBuilder.Entity("eSeminars.Services.Database.Sponzori", b =>
                {
                    b.Navigation("SponzoriSeminaris");
                });

            modelBuilder.Entity("eSeminars.Services.Database.Uloge", b =>
                {
                    b.Navigation("Korisnicis");
                });
#pragma warning restore 612, 618
        }
    }
}
